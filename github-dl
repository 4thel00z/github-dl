#! /usr/bin/env python3
import os
import sys

import requests

root_url = "https://api.github.com"
repo_search_url = "/search/repositories"
token = os.environ.get("GITHUB_DOWNLOADER_TOKEN")

if not token:
    print("You need to go to https://github.com/settings/tokens, generate a new "
          "token and set the token either in code or via the environment variable"
          "GITHUB_DOWNLOADER_TOKEN which you can save in your .bashrc/.zshrc/etc")
    sys.exit(os.EX_SOFTWARE)


def get_headers_by_version(token, version=3):
    return {
        "Accept": f"application/vnd.github.v{version}+json",
        "Authorization": f"token {token}"
    }


def enumerate_endpoints(headers):
    return requests.get(root_url, headers=headers)


def search_repositories(query, headers, page=0, per_page=100, sort=True):
    url = root_url + repo_search_url
    return requests.get(url,
                        params=dict(q=query, page=page, per_page=per_page, sort=sort),
                        headers=headers
                        )


def pluck_repos_for_content_url(repos):
    return {repo["name"]: repo["contents_url"] for repo in repos}


def prompt(title, *choices):
    from prompt_toolkit import prompt as p
    from prompt_toolkit.completion import WordCompleter
    return p(title, completer=WordCompleter(choices))


def drop_nth_url_segment(url, n=1):
    return "/".join(url.split("/")[:-n])


def get_contents(contents_url, headers):
    res = requests.get(contents_url, headers)
    res.raise_for_status()
    contents = res.json()

    without_download_urls = {
        item["name"]: get_contents(item["url"], headers)
        for item in contents
        if not item["download_url"]
    }
    with_download_urls = {
        item["name"]: item["download_url"]
        for item in contents
        if item["download_url"]
    }
    return {**with_download_urls, **without_download_urls}


def flatten(d, parent_key='', sep='/'):
    import collections
    items = []
    for k, v in d.items():
        new_key = parent_key + sep + k if parent_key else k
        if isinstance(v, collections.MutableMapping):
            items.extend(flatten(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def download_file(url, path="."):
    local_filename = url.split('/')[-1]
    file_path = os.path.join(path, local_filename)
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(file_path, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
            f.flush()

    return file_path


if __name__ == '__main__':
    headers = get_headers_by_version(token)
    res = search_repositories(
        input("Enter name for the repository search:\n").strip(),
        headers
    )
    repos = pluck_repos_for_content_url(res.json()["items"])
    contents_url_raw = repos[prompt("Pick a repo:\n", *repos.keys()).strip()]
    contents_url = drop_nth_url_segment(contents_url_raw)
    contents = flatten(get_contents(contents_url, headers))
    link = contents[prompt("Pick a file to download:\n", *contents.keys()).strip()]
    print("Downloading link: ", link)
    print("Downloaded link successfully to:", download_file(link, "/tmp"))

